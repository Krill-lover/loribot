import os
import json
import datetime
import pytz
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests
import random
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = os.getenv("MODEL", "deepseek/deepseek-chat-v3-0324:free")

ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '1862652984').split(',') if id.strip()]
GROUP_CHAT_ID = int(os.getenv('GROUP_CHAT_ID', '-1001234567890'))

DATA_FILE = "homework.json"
SUBSCRIBERS_FILE = "subscribers.json"
MEDIA_DIR = "static/media"
MEHIK_FILE = "mehiks.json"
os.makedirs(MEDIA_DIR, exist_ok=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º parse_mode
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

scheduler = AsyncIOScheduler()
scheduler.start()

# üì¶ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ JSON

# üì¶ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ JSON

def load_homework():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_homework(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def load_subscribers():
    if os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, "r") as f:
            return set(json.load(f))
    return set()

def save_subscribers(subs):
    with open(SUBSCRIBERS_FILE, "w") as f:
        json.dump(list(subs), f)

SUBSCRIBERS = load_subscribers()


def chat_once(prompt: str):
    if not OPENROUTER_API_KEY:
        return {"status": "error", "message": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
            },
            json={
                "model": MODEL,
                "messages": [{"role": "user", "content": prompt}],
            },
            timeout=30
        )
        if response.status_code == 200:
            data = response.json()
            message_text = data["choices"][0]["message"]["content"]
            return {"status": "success", "message": message_text}
        else:
            return {"status": "error", "message": f"HTTP {response.status_code}: {response.text}"}
    except Exception as e:
        return {"status": "error", "message": str(e)}


# üê£ –ú–µ—Ö–∏–∫ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¢–∞–º–∞–≥–æ—á–∏-–ø–æ–º–æ—â–Ω–∏–∫
DEFAULT_MEHIK = {"mood": 100, "hunger": 50, "energy": 100, "stage": 1, "last_update": str(datetime.datetime.now())}

def load_mehiks():
    if os.path.exists(MEHIK_FILE):
        with open(MEHIK_FILE, "r") as f:
            return json.load(f)
    return {}

def save_mehiks(data):
    with open(MEHIK_FILE, "w") as f:
        json.dump(data, f, indent=2)

def update_mehik(user_id):
    mehiks = load_mehiks()
    mehik = mehiks.get(str(user_id), DEFAULT_MEHIK.copy())
    last = datetime.datetime.fromisoformat(mehik["last_update"])
    now = datetime.datetime.now()
    hours_passed = (now - last).total_seconds() // 3600
    mehik["hunger"] = min(100, mehik["hunger"] + int(hours_passed * 5))
    mehik["energy"] = max(0, mehik["energy"] - int(hours_passed * 3))
    mehik["mood"] = max(0, mehik["mood"] - int(hours_passed * 2))
    mehik["last_update"] = str(now)

    if mehik["mood"] > 90 and mehik["energy"] > 80 and mehik["hunger"] < 30:
        mehik["stage"] = min(3, mehik.get("stage", 1) + 1)

    mehiks[str(user_id)] = mehik
    save_mehiks(mehiks)
    return mehik

@router.message(Command("hello"))
async def mehik_hello(message: Message):
    mehik = update_mehik(message.from_user.id)
    mood = mehik["mood"]
    hunger = mehik["hunger"]
    energy = mehik["energy"]
    stage = mehik.get("stage", 1)

    mood_emoji = "üòä" if mood > 70 else "üòê" if mood > 40 else "üò¢" if mood > 20 else "üíÄ"
    hunger_emoji = "üçé" if hunger < 30 else "üçû" if hunger < 60 else "üçî"
    energy_emoji = "‚ö°Ô∏è" if energy > 70 else "üò¥" if energy < 40 else "üîã"
    stage_emoji = {1: "ü•ö", 2: "üê£", 3: "ü§ñ"}.get(stage, "‚ùì")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –î–ó", callback_data="homework"),
         InlineKeyboardButton(text="üß† –°–ø—Ä–æ—Å–∏—Ç—å AI", callback_data="ask")],
        [InlineKeyboardButton(text="üí° –ü—Ä–æ–µ–∫—Ç—ã", callback_data="ideas"),
         InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å", callback_data="find")],
        [InlineKeyboardButton(text="üçé –ü–æ–∫–æ—Ä–º–∏—Ç—å", callback_data="feed"),
         InlineKeyboardButton(text="üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å", callback_data="play"),
         InlineKeyboardButton(text="üò¥ –°–ø–∞—Ç—å", callback_data="sleep")]
    ])

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —è <b>–ú–µ—Ö–∏–∫</b> {stage_emoji} ‚Äî —Ç–≤–æ–π –º–∏–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
        f"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –î–ó, –ø—Ä–æ–µ–∫—Ç—ã, –¥–µ—Ç–∞–ª–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å —Ç–µ–±—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–º!\n\n"
        f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood} {mood_emoji}\n–ì–æ–ª–æ–¥: {hunger} {hunger_emoji}\n–≠–Ω–µ—Ä–≥–∏—è: {energy} {energy_emoji}",
        reply_markup=keyboard
    )

# –ë–∞–∑–∞ –∏–¥–µ–π –∏ –ø–æ–∏—Å–∫
PROJECT_CATEGORIES = {
    "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞": ["–°–¥–µ–ª–∞–π –º–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä –Ω–∞ —Å–µ—Ä–≤–æ", "–ì–∏—Ä–æ–±–∞–ª–∞–Ω—Å–∏—Ä –Ω–∞ Arduino"],
    "—É–º–Ω—ã–π –¥–æ–º": ["–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–µ—Ç–∞ –ø–æ –¥–∞—Ç—á–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ –Ω–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–µ"],
    "–¥—Ä—É–≥–æ–µ": ["–°–µ–Ω—Å–æ—Ä–Ω—ã–π –æ—Ä–≥–∞–Ω –Ω–∞ –±–∞–∑–µ Pi", "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
}

@router.message(F.text & ~F.text.startswith("/"))
async def answer_neural_message(message: Message):
    user_prompt = message.text.strip()
    await message.answer("ü§ñMecha –¥—É–º–∞–µ—Ç...")
    result = chat_once(user_prompt)
    if result["status"] == "success":
        await message.answer(result["message"])
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {result['message']}")



@router.message(Command("ideas"))
async def ideas(message: Message):
    categories = list(PROJECT_CATEGORIES.keys())
    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.title(), callback_data=f"idea_{cat}")
    await message.answer("üí° –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("idea_"))
async def show_idea(callback: CallbackQuery):
    cat = callback.data.replace("idea_", "")
    idea = random.choice(PROJECT_CATEGORIES.get(cat, ["–ò–¥–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"]))
    await callback.message.answer(f"üîß <b>–ü—Ä–æ–µ–∫—Ç ({cat.title()}):</b>\n{idea}")
    await callback.answer()

@router.message(Command("find"))
async def find_parts(message: Message):
    query = message.text.replace("/find", "").strip()
    if not query:
        return await message.answer("üîç –ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /find")

    await message.answer("üì¶ –ò—â—É –Ω–∞ AliExpress, Ozon, Wildberries...")

    # –ò–º–∏—Ç–∞—Ü–∏—è ‚Äî –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    results = [f"üîπ {query} ‚Äî AliExpress", f"üîπ {query} ‚Äî Ozon", f"üîπ {query} ‚Äî WB"]
    await message.answer("\n".join(results))

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω


@scheduler.scheduled_job("cron", hour=20, minute=0, timezone=pytz.timezone("Asia/Yekaterinburg"))
async def send_daily():
    data = load_homework()
    tomorrow = (datetime.date.today() + datetime.timedelta(days=1)).isoformat()
    if tomorrow in data:
        hw = data[tomorrow]
        text = f"üìò –î–æ–º–∞—à–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{hw['text']}"
        try:
            await bot.send_message(GROUP_CHAT_ID, text)
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É: {e}")

        for uid in SUBSCRIBERS:
            try:
                await bot.send_message(uid, text)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

@router.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø MechaHelper. –ù–∞–±–µ—Ä–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "üìò –ö–æ–º–∞–Ω–¥—ã MechaHelper:\n"
        "/homework ‚Äî –¥–æ–º–∞—à–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/calendar ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –î–ó\n"
        "/subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

@router.message(Command("subscribe"))
async def subscribe(message: Message):
    SUBSCRIBERS.add(message.from_user.id)
    save_subscribers(SUBSCRIBERS)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–º–∞—à–∫–µ!")

@router.message(Command("unsubscribe"))
async def unsubscribe(message: Message):
    if message.from_user.id in SUBSCRIBERS:
        SUBSCRIBERS.remove(message.from_user.id)
        save_subscribers(SUBSCRIBERS)
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

@router.message(Command("homework"))
async def homework(message: Message):
    data = load_homework()
    date = (datetime.date.today() + datetime.timedelta(days=1)).isoformat()
    if date in data:
        hw = data[date]
        response = f"üìò –î–æ–º–∞—à–∫–∞ –Ω–∞ <b>{date}</b>:\n\n{hw['text']}"
        await message.answer(response)
        if "file" in hw:
            path = os.path.join(MEDIA_DIR, hw["file"])
            if hw["file"].endswith(".jpg") or hw["file"].endswith(".png"):
                await message.answer_photo(types.FSInputFile(path))
            elif hw["file"].endswith(".mp4"):
                await message.answer_video(types.FSInputFile(path))
            else:
                await message.answer_document(types.FSInputFile(path))
    else:
        await message.answer("üèñ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –î–ó.")

@router.message(Command("calendar"))
async def calendar_command(message: Message):
    data = load_homework()
    if not data:
        return await message.answer("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")

    builder = InlineKeyboardBuilder()
    for date in sorted(data):
        builder.button(text=date, callback_data=f"calendar:{date}")

    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data.startswith("calendar:"))
async def calendar_callback(callback: CallbackQuery):
    date = callback.data.split(":")[1]
    data = load_homework()

    if date not in data:
        return await callback.message.edit_text("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    hw = data[date]
    text = f"üìò –î–ó –Ω–∞ <b>{date}</b>:\n\n{hw['text']}"
    await callback.message.edit_text(text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if "file" in hw:
        path = os.path.join(MEDIA_DIR, hw["file"])
        try:
            if hw["file"].endswith(".jpg") or hw["file"].endswith(".png"):
                await callback.message.answer_photo(types.FSInputFile(path))
            elif hw["file"].endswith(".mp4"):
                await callback.message.answer_video(types.FSInputFile(path))
            else:
                await callback.message.answer_document(types.FSInputFile(path))
        except Exception as e:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")


@router.message(Command("delete"))
async def delete_hw(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /delete YYYY-MM-DD")
    date = parts[1]
    data = load_homework()
    if date in data:
        if "file" in data[date]:
            try:
                os.remove(os.path.join(MEDIA_DIR, data[date]["file"]))
            except:
                pass
        del data[date]
        save_homework(data)
        await message.answer(f"‚ùå –î–æ–º–∞—à–∫–∞ –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ.")


@router.message(Command("sethomework"))
async def set_homework(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    text = message.text.replace("/sethomework", "").strip()
    date = datetime.date.today() + datetime.timedelta(days=1)

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD)
    if text[:10].count("-") == 2:
        try:
            date = datetime.datetime.strptime(text[:10], "%Y-%m-%d").date()
            text = text[11:].strip()
        except ValueError:
            pass

    date_str = date.isoformat()
    data = load_homework()
    hw = {"text": text}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if message.document:
        file_name = f"{date_str}_{message.document.file_name}"
        await bot.download(message.document, destination=os.path.join(MEDIA_DIR, file_name))
        hw["file"] = file_name

    elif message.photo:
        file_name = f"{date_str}_photo.jpg"
        await bot.download(message.photo[-1], destination=os.path.join(MEDIA_DIR, file_name))
        hw["file"] = file_name

    elif message.video:
        file_name = f"{date_str}_video.mp4"
        await bot.download(message.video, destination=os.path.join(MEDIA_DIR, file_name))
        hw["file"] = file_name

    data[date_str] = hw
    save_homework(data)

    await message.answer(f"‚úÖ –î–æ–º–∞—à–∫–∞ –Ω–∞ {date_str} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")



# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 20:00
scheduler = AsyncIOScheduler()
scheduler.start()


@router.message()
async def echo_all(message: Message):
    await message.answer("üì© –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /hello")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))