import os
import json
import datetime
import pytz
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '1862652984').split(',') if id.strip()]
TZ = os.getenv('TZ', 'Asia/Yekaterinburg')

print(f"–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:10]}...")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

DATA_FILE = "homework.json"
SUBSCRIBERS_FILE = "subscribers.json"
MEDIA_DIR = "media"

os.makedirs(MEDIA_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –î–ó
def load_homework():
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except (json.JSONDecodeError, IOError) as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ homework.json: {e}")
        return {}


def save_homework(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è homework.json: {e}")
        return False


# –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
def load_subscribers():
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, "r") as f:
                return set(json.load(f))
        return set()
    except (json.JSONDecodeError, IOError) as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ subscribers.json: {e}")
        return set()


def save_subscribers(subs):
    try:
        with open(SUBSCRIBERS_FILE, "w") as f:
            json.dump(list(subs), f)
        return True
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è subscribers.json: {e}")
        return False


SUBSCRIBERS = load_subscribers()


# –ö–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø MechaHelper. –ù–∞–±–µ—Ä–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")


@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "üìò –ö–æ–º–∞–Ω–¥—ã MechaHelper:\n"
        "/homework ‚Äî –¥–æ–º–∞—à–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/calendar ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –î–ó\n"
        "/subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )


@router.message(Command("subscribe"))
async def subscribe(message: Message):
    SUBSCRIBERS.add(message.from_user.id)
    if save_subscribers(SUBSCRIBERS):
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–º–∞—à–∫–µ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")


@router.message(Command("unsubscribe"))
async def unsubscribe(message: Message):
    if message.from_user.id in SUBSCRIBERS:
        SUBSCRIBERS.remove(message.from_user.id)
        if save_subscribers(SUBSCRIBERS):
            await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


@router.message(Command("homework"))
async def homework(message: Message):
    data = load_homework()
    date = (datetime.date.today() + datetime.timedelta(days=1)).isoformat()
    if date in data:
        hw = data[date]
        response = f"üìò –î–æ–º–∞—à–∫–∞ –Ω–∞ <b>{date}</b>:\n\n{hw['text']}"
        await message.answer(response)
        if "file" in hw:
            path = os.path.join(MEDIA_DIR, hw["file"])
            try:
                if hw["file"].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                    await message.answer_photo(types.FSInputFile(path))
                elif hw["file"].endswith(('.mp4', '.mov', '.avi')):
                    await message.answer_video(types.FSInputFile(path))
                else:
                    await message.answer_document(types.FSInputFile(path))
            except Exception as e:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")
    else:
        await message.answer("üèñ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –î–ó.")


@router.message(Command("calendar"))
async def calendar_command(message: Message):
    data = load_homework()
    if not data:
        return await message.answer("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")

    builder = InlineKeyboardBuilder()
    for date in sorted(data):
        builder.button(text=date, callback_data=f"calendar:{date}")
    builder.adjust(2)

    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=builder.as_markup())


@router.callback_query(lambda c: c.data.startswith("calendar:"))
async def calendar_callback(callback: CallbackQuery):
    date = callback.data.split(":")[1]
    data = load_homework()

    if date not in data:
        return await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    hw = data[date]
    text = f"üìò –î–ó –Ω–∞ <b>{date}</b>:\n\n{hw['text']}"
    await callback.message.edit_text(text)

    if "file" in hw:
        path = os.path.join(MEDIA_DIR, hw["file"])
        try:
            if hw["file"].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                await callback.message.answer_photo(types.FSInputFile(path))
            elif hw["file"].endswith(('.mp4', '.mov', '.avi')):
                await callback.message.answer_video(types.FSInputFile(path))
            else:
                await callback.message.answer_document(types.FSInputFile(path))
        except Exception as e:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")

    await callback.answer()


@router.message(Command("delete"))
async def delete_hw(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /delete YYYY-MM-DD")

    date = parts[1]
    data = load_homework()
    if date in data:
        if "file" in data[date]:
            try:
                os.remove(os.path.join(MEDIA_DIR, data[date]["file"]))
            except:
                pass
        del data[date]
        if save_homework(data):
            await message.answer(f"‚ùå –î–æ–º–∞—à–∫–∞ –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ.")


@router.message(Command("sethomework"))
async def set_homework(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    if not (message.text or message.caption or message.document or message.photo or message.video):
        return await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")

    text_content = message.text or message.caption or ""
    text_content = text_content.replace("/sethomework", "").strip()

    date = datetime.date.today() + datetime.timedelta(days=1)

    if text_content and text_content[:10].count("-") == 2:
        try:
            date = datetime.datetime.strptime(text_content[:10], "%Y-%m-%d").date()
            text_content = text_content[11:].strip()
        except ValueError:
            pass

    date_str = date.isoformat()
    data = load_homework()
    hw = {"text": text_content}

    if message.document:
        file_name = f"{date_str}_{message.document.file_name}"
        await bot.download(message.document, destination=os.path.join(MEDIA_DIR, file_name))
        hw["file"] = file_name

    elif message.photo:
        file_name = f"{date_str}_photo.jpg"
        await bot.download(message.photo[-1], destination=os.path.join(MEDIA_DIR, file_name))
        hw["file"] = file_name

    elif message.video:
        file_name = f"{date_str}_video.mp4"
        await bot.download(message.video, destination=os.path.join(MEDIA_DIR, file_name))
        hw["file"] = file_name

    data[date_str] = hw
    if save_homework(data):
        await message.answer(f"‚úÖ –î–æ–º–∞—à–∫–∞ –Ω–∞ {date_str} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=pytz.timezone(TZ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    @scheduler.scheduled_job("cron", hour=20, minute=0)
    async def send_daily():
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        data = load_homework()
        tomorrow = (datetime.date.today() + datetime.timedelta(days=1)).isoformat()
        if tomorrow in data:
            hw = data[tomorrow]
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –î–ó –Ω–∞ {tomorrow} –¥–ª—è {len(SUBSCRIBERS)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            for uid in SUBSCRIBERS:
                try:
                    await bot.send_message(uid, f"üìò –î–æ–º–∞—à–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{hw['text']}")
                    if "file" in hw:
                        path = os.path.join(MEDIA_DIR, hw["file"])
                        try:
                            if hw["file"].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                                await bot.send_photo(uid, types.FSInputFile(path))
                            elif hw["file"].endswith(('.mp4', '.mov', '.avi')):
                                await bot.send_video(uid, types.FSInputFile(path))
                            else:
                                await bot.send_document(uid, types.FSInputFile(path))
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        else:
            print("–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())